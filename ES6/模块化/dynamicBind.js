/**
模块化的静态加载与动态
静态加载【编译时加载】：
  - 因为编译时加载，所以【先于模块内的其他语句执行】；
  - ES6在【编译阶段】只加载import的方法，整个引入包内的其他方法不加载；
  - CommonJs是将整个包作为对象引入，在对象上取方法（属性）【加载了无用的方法】；
  - ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。【ES6是引用，CommonJS是复制】
  - ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。
动态：
  - export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。

*/

export var foo = "bar ---变化前";
setTimeout(() => (foo = "baz ---变化后"), 500);
